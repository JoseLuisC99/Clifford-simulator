from typing import Set, Dict
import numpy as np
from itertools import combinations, product
import random
from .base import Simulator

class GraphStateSimulator(Simulator):
    LOCAL_CLIFFORD_GROUP = np.array([
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], 
        [1, 0, 3, 2, 6, 7, 4, 5, 11, 10, 9, 8, 13, 12, 15, 14, 19, 18, 17, 16, 22, 23, 20, 21], 
        [2, 3, 0, 1, 5, 4, 7, 6, 10, 11, 8, 9, 15, 14, 13, 12, 17, 16, 19, 18, 23, 22, 21, 20], 
        [3, 2, 1, 0, 7, 6, 5, 4, 9, 8, 11, 10, 14, 15, 12, 13, 18, 19, 16, 17, 21, 20, 23, 22], 
        [4, 5, 6, 7, 0, 1, 2, 3, 20, 21, 22, 23, 16, 17, 18, 19, 12, 13, 14, 15, 8, 9, 10, 11], 
        [5, 4, 7, 6, 2, 3, 0, 1, 23, 22, 21, 20, 17, 16, 19, 18, 15, 14, 13, 12, 10, 11, 8, 9], 
        [6, 7, 4, 5, 1, 0, 3, 2, 22, 23, 20, 21, 19, 18, 17, 16, 13, 12, 15, 14, 11, 10, 9, 8], 
        [7, 6, 5, 4, 3, 2, 1, 0, 21, 20, 23, 22, 18, 19, 16, 17, 14, 15, 12, 13, 9, 8, 11, 10], 
        [8, 9, 10, 11, 16, 17, 18, 19, 0, 1, 2, 3, 20, 21, 22, 23, 4, 5, 6, 7, 12, 13, 14, 15], 
        [9, 8, 11, 10, 18, 19, 16, 17, 3, 2, 1, 0, 21, 20, 23, 22, 7, 6, 5, 4, 14, 15, 12, 13], 
        [10, 11, 8, 9, 17, 16, 19, 18, 2, 3, 0, 1, 23, 22, 21, 20, 5, 4, 7, 6, 15, 14, 13, 12], 
        [11, 10, 9, 8, 19, 18, 17, 16, 1, 0, 3, 2, 22, 23, 20, 21, 6, 7, 4, 5, 13, 12, 15, 14], 
        [12, 13, 14, 15, 20, 21, 22, 23, 16, 17, 18, 19, 0, 1, 2, 3, 8, 9, 10, 11, 4, 5, 6, 7], 
        [13, 12, 15, 14, 22, 23, 20, 21, 19, 18, 17, 16, 1, 0, 3, 2, 11, 10, 9, 8, 6, 7, 4, 5], 
        [14, 15, 12, 13, 21, 20, 23, 22, 18, 19, 16, 17, 3, 2, 1, 0, 9, 8, 11, 10, 7, 6, 5, 4], 
        [15, 14, 13, 12, 23, 22, 21, 20, 17, 16, 19, 18, 2, 3, 0, 1, 10, 11, 8, 9, 5, 4, 7, 6], 
        [16, 17, 18, 19, 8, 9, 10, 11, 12, 13, 14, 15, 4, 5, 6, 7, 20, 21, 22, 23, 0, 1, 2, 3], 
        [17, 16, 19, 18, 10, 11, 8, 9, 15, 14, 13, 12, 5, 4, 7, 6, 23, 22, 21, 20, 2, 3, 0, 1], 
        [18, 19, 16, 17, 9, 8, 11, 10, 14, 15, 12, 13, 7, 6, 5, 4, 21, 20, 23, 22, 3, 2, 1, 0], 
        [19, 18, 17, 16, 11, 10, 9, 8, 13, 12, 15, 14, 6, 7, 4, 5, 22, 23, 20, 21, 1, 0, 3, 2],
        [20, 21, 22, 23, 12, 13, 14, 15, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 16, 17, 18, 19], 
        [21, 20, 23, 22, 14, 15, 12, 13, 7, 6, 5, 4, 9, 8, 11, 10, 3, 2, 1, 0, 18, 19, 16, 17], 
        [22, 23, 20, 21, 13, 12, 15, 14, 6, 7, 4, 5, 11, 10, 9, 8, 1, 0, 3, 2, 19, 18, 17, 16], 
        [23, 22, 21, 20, 15, 14, 13, 12, 5, 4, 7, 6, 10, 11, 8, 9, 2, 3, 0, 1, 17, 16, 19, 18]], dtype=int)

    DECOMPOSITION_LOOKUP_TABLE = [
        [0, 0, 0, 0], [0, 0], [1, 1, 0, 0], [1, 1], [1, 0, 0], [1], [1, 1, 1], [0, 0, 1], [0, 1, 0], 
        [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0], [0, 1, 1], [1, 1, 0], [0, 0, 0], [0], 
        [1, 1, 1, 0], [0, 0, 1, 0], [1, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 1, 1, 1], [0, 1], [0, 1, 0, 0]
    ]

    CZ_TABLE = np.array([
        [
            [
                [1, 0, 0], [1, 0, 0], [1, 0, 3], [1, 0, 3], [1, 0, 5], [1, 0, 5], 
                [1, 0, 6], [1, 0, 6], [0, 3, 8], [0, 3, 8], [0, 0, 10], [0, 0, 10], 
                [1, 0, 3], [1, 0, 3], [1, 0, 0], [1, 0, 0], [1, 0, 6], [1, 0, 6], 
                [1, 0, 5], [1, 0, 5], [0, 0, 10], [0, 0, 10], [0, 3, 8], [0, 3, 8]
            ], 
            [
                [1, 0, 0], [1, 0, 0], [1, 0, 3], [1, 0, 3], [1, 0, 5], [1, 0, 5], 
                [1, 0, 6], [1, 0, 6], [0, 2, 8], [0, 2, 8], [0, 0, 10], [0, 0, 10], 
                [1, 0, 3], [1, 0, 3], [1, 0, 0], [1, 0, 0], [1, 0, 6], [1, 0, 6], 
                [1, 0, 5], [1, 0, 5], [0, 0, 10], [0, 0, 10], [0, 2, 8], [0, 2, 8]
            ], 
            [
                [1, 2, 3], [1, 0, 1], [1, 0, 2], [1, 2, 0], [1, 0, 4], [1, 2, 6], 
                [1, 2, 5], [1, 0, 7], [0, 0, 8], [0, 0, 8], [0, 2, 10], [0, 2, 10], 
                [1, 0, 2], [1, 0, 2], [1, 0, 1], [1, 0, 1], [1, 0, 7], [1, 0, 7], 
                [1, 0, 4], [1, 0, 4], [0, 2, 10], [0, 2, 10], [0, 0, 8], [0, 0, 8]
            ], 
            [
                [1, 3, 0], [1, 0, 1], [1, 0, 2], [1, 3, 3], [1, 0, 4], [1, 3, 5], 
                [1, 3, 6], [1, 0, 7], [0, 0, 8], [0, 0, 8], [0, 3, 10], [0, 3, 10], 
                [1, 0, 2], [1, 0, 2], [1, 0, 1], [1, 0, 1], [1, 0, 7], [1, 0, 7], 
                [1, 0, 4], [1, 0, 4], [0, 3, 10], [0, 3, 10], [0, 0, 8], [0, 0, 8]
            ], 
            [
                [1, 4, 3], [1, 4, 3], [1, 4, 0], [1, 4, 0], [1, 4, 6], [1, 4, 6], 
                [1, 4, 5], [1, 4, 5], [0, 6, 8], [0, 6, 8], [0, 4, 10], [0, 4, 10], 
                [1, 4, 0], [1, 4, 0], [1, 4, 3], [1, 4, 3], [1, 4, 5], [1, 4, 5], 
                [1, 4, 6], [1, 4, 6], [0, 4, 10], [0, 4, 10], [0, 6, 8], [0, 6, 8]
            ], 
            [
                [1, 5, 0], [1, 5, 0], [1, 5, 3], [1, 5, 3], [1, 5, 5], [1, 5, 5], 
                [1, 5, 6], [1, 5, 6], [0, 6, 8], [0, 6, 8], [0, 5, 10], [0, 5, 10], 
                [1, 5, 3], [1, 5, 3], [1, 5, 0], [1, 5, 0], [1, 5, 6], [1, 5, 6], 
                [1, 5, 5], [1, 5, 5], [0, 5, 10], [0, 5, 10], [0, 6, 8], [0, 6, 8]
            ], 
            [
                [1, 6, 0], [1, 5, 1], [1, 5, 2], [1, 6, 3], [1, 5, 4], [1, 6, 5], 
                [1, 6, 6], [1, 5, 7], [0, 5, 8], [0, 5, 8], [0, 6, 10], [0, 6, 10], 
                [1, 5, 2], [1, 5, 2], [1, 5, 1], [1, 5, 1], [1, 5, 7], [1, 5, 7], 
                [1, 5, 4], [1, 5, 4], [0, 6, 10], [0, 6, 10], [0, 5, 8], [0, 5, 8]
            ], 
            [
                [1, 6, 0], [1, 4, 2], [1, 4, 1], [1, 6, 3], [1, 4, 7], [1, 6, 5], 
                [1, 6, 6], [1, 4, 4], [0, 4, 8], [0, 4, 8], [0, 6, 10], [0, 6, 10], 
                [1, 4, 1], [1, 4, 1], [1, 4, 2], [1, 4, 2], [1, 4, 4], [1, 4, 4], 
                [1, 4, 7], [1, 4, 7], [0, 6, 10], [0, 6, 10], [0, 4, 8], [0, 4, 8]
            ], 
            [
                [0, 8, 3], [0, 8, 2], [0, 8, 0], [0, 8, 0], [0, 8, 6], [0, 8, 6], 
                [0, 8, 5], [0, 8, 4], [0, 8, 8], [0, 8, 8], [0, 8, 10], [0, 8, 10], 
                [0, 8, 0], [0, 8, 0], [0, 8, 2], [0, 8, 2], [0, 8, 4], [0, 8, 4], 
                [0, 8, 6], [0, 8, 6], [0, 8, 10], [0, 8, 10], [0, 8, 8], [0, 8, 8]
            ], 
            [
                [0, 8, 3], [0, 8, 2], [0, 8, 0], [0, 8, 0], [0, 8, 6], [0, 8, 6], 
                [0, 8, 5], [0, 8, 4], [0, 8, 8], [0, 8, 8], [0, 8, 10], [0, 8, 10], 
                [0, 8, 0], [0, 8, 0], [0, 8, 2], [0, 8, 2], [0, 8, 4], [0, 8, 4], 
                [0, 8, 6], [0, 8, 6], [0, 8, 10], [0, 8, 10], [0, 8, 8], [0, 8, 8]
            ], 
            [
                [0, 10, 0], [0, 10, 0], [0, 10, 2], [0, 10, 3], [0, 10, 4], [0, 10, 5], 
                [0, 10, 6], [0, 10, 6], [0, 10, 8], [0, 10, 8], [0, 10, 10], [0, 10, 10], 
                [0, 10, 2], [0, 10, 2], [0, 10, 0], [0, 10, 0], [0, 10, 6], [0, 10, 6], 
                [0, 10, 4], [0, 10, 4], [0, 10, 10], [0, 10, 10], [0, 10, 8], [0, 10, 8]
            ], 
            [
                [0, 10, 0], [0, 10, 0], [0, 10, 2], [0, 10, 3], [0, 10, 4], [0, 10, 5], 
                [0, 10, 6], [0, 10, 6], [0, 10, 8], [0, 10, 8], [0, 10, 10], [0, 10, 10], 
                [0, 10, 2], [0, 10, 2], [0, 10, 0], [0, 10, 0], [0, 10, 6], [0, 10, 6], 
                [0, 10, 4], [0, 10, 4], [0, 10, 10], [0, 10, 10], [0, 10, 8], [0, 10, 8]
            ], 
            [
                [1, 2, 3], [1, 0, 1], [1, 0, 2], [1, 2, 0], [1, 0, 4], [1, 2, 6], 
                [1, 2, 5], [1, 0, 7], [0, 0, 8], [0, 0, 8], [0, 2, 10], [0, 2, 10], 
                [1, 0, 2], [1, 0, 2], [1, 0, 1], [1, 0, 1], [1, 0, 7], [1, 0, 7], 
                [1, 0, 4], [1, 0, 4], [0, 2, 10], [0, 2, 10], [0, 0, 8], [0, 0, 8]
            ], 
            [
                [1, 2, 3], [1, 0, 1], [1, 0, 2], [1, 2, 0], [1, 0, 4], [1, 2, 6], 
                [1, 2, 5], [1, 0, 7], [0, 0, 8], [0, 0, 8], [0, 2, 10], [0, 2, 10], 
                [1, 0, 2], [1, 0, 2], [1, 0, 1], [1, 0, 1], [1, 0, 7], [1, 0, 7], 
                [1, 0, 4], [1, 0, 4], [0, 2, 10], [0, 2, 10], [0, 0, 8], [0, 0, 8]
            ], 
            [
                [1, 0, 0], [1, 0, 0], [1, 0, 3], [1, 0, 3], [1, 0, 5], [1, 0, 5], 
                [1, 0, 6], [1, 0, 6], [0, 2, 8], [0, 2, 8], [0, 0, 10], [0, 0, 10], 
                [1, 0, 3], [1, 0, 3], [1, 0, 0], [1, 0, 0], [1, 0, 6], [1, 0, 6], 
                [1, 0, 5], [1, 0, 5], [0, 0, 10], [0, 0, 10], [0, 2, 8], [0, 2, 8]
            ], 
            [
                [1, 0, 0], [1, 0, 0], [1, 0, 3], [1, 0, 3], [1, 0, 5], [1, 0, 5], 
                [1, 0, 6], [1, 0, 6], [0, 2, 8], [0, 2, 8], [0, 0, 10], [0, 0, 10], 
                [1, 0, 3], [1, 0, 3], [1, 0, 0], [1, 0, 0], [1, 0, 6], [1, 0, 6], 
                [1, 0, 5], [1, 0, 5], [0, 0, 10], [0, 0, 10], [0, 2, 8], [0, 2, 8]
            ], 
            [
                [1, 6, 0], [1, 4, 2], [1, 4, 1], [1, 6, 3], [1, 4, 7], [1, 6, 5], 
                [1, 6, 6], [1, 4, 4], [0, 4, 8], [0, 4, 8], [0, 6, 10], [0, 6, 10], 
                [1, 4, 1], [1, 4, 1], [1, 4, 2], [1, 4, 2], [1, 4, 4], [1, 4, 4], 
                [1, 4, 7], [1, 4, 7], [0, 6, 10], [0, 6, 10], [0, 4, 8], [0, 4, 8]
            ], 
            [
                [1, 6, 0], [1, 4, 2], [1, 4, 1], [1, 6, 3], [1, 4, 7], [1, 6, 5], 
                [1, 6, 6], [1, 4, 4], [0, 4, 8], [0, 4, 8], [0, 6, 10], [0, 6, 10], 
                [1, 4, 1], [1, 4, 1], [1, 4, 2], [1, 4, 2], [1, 4, 4], [1, 4, 4], 
                [1, 4, 7], [1, 4, 7], [0, 6, 10], [0, 6, 10], [0, 4, 8], [0, 4, 8]
            ], 
            [
                [1, 4, 3], [1, 4, 3], [1, 4, 0], [1, 4, 0], [1, 4, 6], [1, 4, 6], 
                [1, 4, 5], [1, 4, 5], [0, 6, 8], [0, 6, 8], [0, 4, 10], [0, 4, 10], 
                [1, 4, 0], [1, 4, 0], [1, 4, 3], [1, 4, 3], [1, 4, 5], [1, 4, 5], 
                [1, 4, 6], [1, 4, 6], [0, 4, 10], [0, 4, 10], [0, 6, 8], [0, 6, 8]
            ], 
            [
                [1, 4, 3], [1, 4, 3], [1, 4, 0], [1, 4, 0], [1, 4, 6], [1, 4, 6], 
                [1, 4, 5], [1, 4, 5], [0, 6, 8], [0, 6, 8], [0, 4, 10], [0, 4, 10], 
                [1, 4, 0], [1, 4, 0], [1, 4, 3], [1, 4, 3], [1, 4, 5], [1, 4, 5], 
                [1, 4, 6], [1, 4, 6], [0, 4, 10], [0, 4, 10], [0, 6, 8], [0, 6, 8]
            ], 
            [
                [0, 10, 0], [0, 10, 0], [0, 10, 2], [0, 10, 3], [0, 10, 4], [0, 10, 5], 
                [0, 10, 6], [0, 10, 6], [0, 10, 8], [0, 10, 8], [0, 10, 10], [0, 10, 10], 
                [0, 10, 2], [0, 10, 2], [0, 10, 0], [0, 10, 0], [0, 10, 6], [0, 10, 6], 
                [0, 10, 4], [0, 10, 4], [0, 10, 10], [0, 10, 10], [0, 10, 8], [0, 10, 8]
            ], 
            [
                [0, 10, 0], [0, 10, 0], [0, 10, 2], [0, 10, 3], [0, 10, 4], [0, 10, 5], 
                [0, 10, 6], [0, 10, 6], [0, 10, 8], [0, 10, 8], [0, 10, 10], [0, 10, 10], 
                [0, 10, 2], [0, 10, 2], [0, 10, 0], [0, 10, 0], [0, 10, 6], [0, 10, 6], 
                [0, 10, 4], [0, 10, 4], [0, 10, 10], [0, 10, 10], [0, 10, 8], [0, 10, 8]
            ], 
            [
                [0, 8, 3], [0, 8, 2], [0, 8, 0], [0, 8, 0], [0, 8, 6], [0, 8, 6], 
                [0, 8, 5], [0, 8, 4], [0, 8, 8], [0, 8, 8], [0, 8, 10], [0, 8, 10], 
                [0, 8, 0], [0, 8, 0], [0, 8, 2], [0, 8, 2], [0, 8, 4], [0, 8, 4], 
                [0, 8, 6], [0, 8, 6], [0, 8, 10], [0, 8, 10], [0, 8, 8], [0, 8, 8]
            ], 
            [
                [0, 8, 3], [0, 8, 2], [0, 8, 0], [0, 8, 0], [0, 8, 6], [0, 8, 6], 
                [0, 8, 5], [0, 8, 4], [0, 8, 8], [0, 8, 8], [0, 8, 10], [0, 8, 10], 
                [0, 8, 0], [0, 8, 0], [0, 8, 2], [0, 8, 2], [0, 8, 4], [0, 8, 4], 
                [0, 8, 6], [0, 8, 6], [0, 8, 10], [0, 8, 10], [0, 8, 8], [0, 8, 8]
            ]
        ], 
        [
            [
                [0, 0, 0], [0, 3, 0], [0, 3, 2], [0, 0, 3], [0, 3, 4], [0, 0, 5], 
                [0, 0, 6], [0, 3, 6], [1, 5, 23], [1, 5, 22], [1, 5, 21], [1, 5, 20], 
                [0, 5, 2], [0, 6, 2], [0, 5, 0], [0, 6, 0], [0, 6, 6], [0, 5, 6], 
                [0, 6, 4], [0, 5, 4], [1, 5, 10], [1, 5, 11], [1, 5, 8], [1, 5, 9]
            ], 
            [
                [0, 0, 3], [0, 2, 2], [0, 2, 0], [0, 0, 0], [0, 2, 6], [0, 0, 6], 
                [0, 0, 5], [0, 2, 4], [1, 4, 23], [1, 4, 22], [1, 4, 21], [1, 4, 20], 
                [0, 6, 0], [0, 4, 0], [0, 6, 2], [0, 4, 2], [0, 4, 4], [0, 6, 4], 
                [0, 4, 6], [0, 6, 6], [1, 4, 10], [1, 4, 11], [1, 4, 8], [1, 4, 9]
            ], 
            [
                [0, 2, 3], [0, 0, 2], [0, 0, 0], [0, 2, 0], [0, 0, 6], [0, 2, 6], 
                [0, 2, 5], [0, 0, 4], [1, 4, 22], [1, 4, 23], [1, 4, 20], [1, 4, 21], 
                [0, 4, 0], [0, 6, 0], [0, 4, 2], [0, 6, 2], [0, 6, 4], [0, 4, 4], 
                [0, 6, 6], [0, 4, 6], [1, 4, 11], [1, 4, 10], [1, 4, 9], [1, 4, 8]
            ], 
            [
                [0, 3, 0], [0, 0, 0], [0, 0, 2], [0, 3, 3], [0, 0, 4], [0, 3, 5], 
                [0, 3, 6], [0, 0, 6], [1, 5, 22], [1, 5, 23], [1, 5, 20], [1, 5, 21], 
                [0, 6, 2], [0, 5, 2], [0, 6, 0], [0, 5, 0], [0, 5, 6], [0, 6, 6], 
                [0, 5, 4], [0, 6, 4], [1, 5, 11], [1, 5, 10], [1, 5, 9], [1, 5, 8]
            ], 
            [
                [0, 4, 3], [0, 6, 2], [0, 6, 0], [0, 4, 0], [0, 6, 6], [0, 4, 6], 
                [0, 4, 5], [0, 6, 4], [1, 0, 21], [1, 0, 20], [1, 0, 23], [1, 0, 22], 
                [0, 0, 0], [0, 2, 0], [0, 0, 2], [0, 2, 2], [0, 2, 4], [0, 0, 4], 
                [0, 2, 6], [0, 0, 6], [1, 0, 8], [1, 0, 9], [1, 0, 10], [1, 0, 11]
            ], 
            [
                [0, 5, 0], [0, 6, 0], [0, 6, 2], [0, 5, 3], [0, 6, 4], [0, 5, 5], 
                [0, 5, 6], [0, 6, 6], [1, 0, 22], [1, 0, 23], [1, 0, 20], [1, 0, 21], 
                [0, 3, 2], [0, 0, 2], [0, 3, 0], [0, 0, 0], [0, 0, 6], [0, 3, 6], 
                [0, 0, 4], [0, 3, 4], [1, 0, 11], [1, 0, 10], [1, 0, 9], [1, 0, 8]
            ], 
            [
                [0, 6, 0], [0, 5, 0], [0, 5, 2], [0, 6, 3], [0, 5, 4], [0, 6, 5], 
                [0, 6, 6], [0, 5, 6], [1, 0, 23], [1, 0, 22], [1, 0, 21], [1, 0, 20], 
                [0, 0, 2], [0, 3, 2], [0, 0, 0], [0, 3, 0], [0, 3, 6], [0, 0, 6], 
                [0, 3, 4], [0, 0, 4], [1, 0, 10], [1, 0, 11], [1, 0, 8], [1, 0, 9]
            ], 
            [
                [0, 6, 3], [0, 4, 2], [0, 4, 0], [0, 6, 0], [0, 4, 6], [0, 6, 6], 
                [0, 6, 5], [0, 4, 4], [1, 0, 20], [1, 0, 21], [1, 0, 22], [1, 0, 23], 
                [0, 2, 0], [0, 0, 0], [0, 2, 2], [0, 0, 2], [0, 0, 4], [0, 2, 4], 
                [0, 0, 6], [0, 2, 6], [1, 0, 9], [1, 0, 8], [1, 0, 11], [1, 0, 10]
            ], 
            [
                [1, 22, 6], [1, 20, 5], [1, 20, 6], [1, 22, 5], [1, 20, 3], [1, 22, 0], 
                [1, 22, 3], [1, 20, 0], [0, 0, 0], [0, 0, 2], [0, 2, 2], [0, 2, 0], 
                [0, 6, 6], [0, 4, 4], [0, 6, 4], [0, 4, 6], [0, 4, 2], [0, 6, 0], 
                [0, 4, 0], [0, 6, 2], [0, 2, 4], [0, 2, 6], [0, 0, 6], [0, 0, 4]
            ], 
            [
                [1, 22, 5], [1, 20, 6], [1, 20, 5], [1, 22, 6], [1, 20, 0], [1, 22, 3], 
                [1, 22, 0], [1, 20, 3], [0, 2, 0], [0, 2, 2], [0, 0, 2], [0, 0, 0], 
                [0, 4, 6], [0, 6, 4], [0, 4, 4], [0, 6, 6], [0, 6, 2], [0, 4, 0], 
                [0, 6, 0], [0, 4, 2], [0, 0, 4], [0, 0, 6], [0, 2, 6], [0, 2, 4]
            ], 
            [
                [1, 20, 6], [1, 20, 7], [1, 20, 4], [1, 20, 5], [1, 20, 1], [1, 20, 0], 
                [1, 20, 3], [1, 20, 2], [0, 2, 2], [0, 2, 0], [0, 0, 0], [0, 0, 2], 
                [0, 6, 4], [0, 4, 6], [0, 6, 6], [0, 4, 4], [0, 4, 0], [0, 6, 2], 
                [0, 4, 2], [0, 6, 0], [0, 0, 6], [0, 0, 4], [0, 2, 4], [0, 2, 6]
            ], 
            [
                [1, 20, 5], [1, 20, 4], [1, 20, 7], [1, 20, 6], [1, 20, 2], [1, 20, 3], 
                [1, 20, 0], [1, 20, 1], [0, 0, 2], [0, 0, 0], [0, 2, 0], [0, 2, 2], 
                [0, 4, 4], [0, 6, 6], [0, 4, 6], [0, 6, 4], [0, 6, 0], [0, 4, 2], 
                [0, 6, 2], [0, 4, 0], [0, 2, 6], [0, 2, 4], [0, 0, 4], [0, 0, 6]
            ], 
            [
                [0, 2, 5], [0, 0, 6], [0, 0, 4], [0, 2, 6], [0, 0, 0], [0, 2, 3], 
                [0, 2, 0], [0, 0, 2], [0, 6, 6], [0, 6, 4], [0, 4, 6], [0, 4, 4], 
                [1, 16, 18], [1, 16, 19], [1, 16, 16], [1, 16, 17], [1, 16, 12], [1, 16, 13], 
                [1, 16, 14], [1, 16, 15], [0, 4, 2], [0, 4, 0], [0, 6, 2], [0, 6, 0]
            ], 
            [
                [0, 2, 6], [0, 0, 4], [0, 0, 6], [0, 2, 5], [0, 0, 2], [0, 2, 0], 
                [0, 2, 3], [0, 0, 0], [0, 4, 4], [0, 4, 6], [0, 6, 4], [0, 6, 6], 
                [1, 16, 17], [1, 16, 16], [1, 16, 19], [1, 16, 18], [1, 16, 15], [1, 16, 14], 
                [1, 16, 13], [1, 16, 12], [0, 6, 0], [0, 6, 2], [0, 4, 0], [0, 4, 2]
            ], 
            [
                [0, 0, 5], [0, 2, 6], [0, 2, 4], [0, 0, 6], [0, 2, 0], [0, 0, 3], 
                [0, 0, 0], [0, 2, 2], [0, 4, 6], [0, 4, 4], [0, 6, 6], [0, 6, 4], 
                [1, 16, 16], [1, 16, 17], [1, 16, 18], [1, 16, 19], [1, 16, 14], [1, 16, 15], 
                [1, 16, 12], [1, 16, 13], [0, 6, 2], [0, 6, 0], [0, 4, 2], [0, 4, 0]
            ], 
            [
                [0, 0, 6], [0, 2, 4], [0, 2, 6], [0, 0, 5], [0, 2, 2], [0, 0, 0], 
                [0, 0, 3], [0, 2, 0], [0, 6, 4], [0, 6, 6], [0, 4, 4], [0, 4, 6], 
                [1, 16, 19], [1, 16, 18], [1, 16, 17], [1, 16, 16], [1, 16, 13], [1, 16, 12], 
                [1, 16, 15], [1, 16, 14], [0, 4, 0], [0, 4, 2], [0, 6, 0], [0, 6, 2]
            ], 
            [
                [0, 6, 6], [0, 4, 4], [0, 4, 6], [0, 6, 5], [0, 4, 2], [0, 6, 0], 
                [0, 6, 3], [0, 4, 0], [0, 2, 4], [0, 2, 6], [0, 0, 4], [0, 0, 6], 
                [1, 12, 16], [1, 12, 17], [1, 12, 18], [1, 12, 19], [1, 12, 14], [1, 12, 15], 
                [1, 12, 12], [1, 12, 13], [0, 0, 0], [0, 0, 2], [0, 2, 0], [0, 2, 2]
            ], 
            [
                [0, 6, 5], [0, 4, 6], [0, 4, 4], [0, 6, 6], [0, 4, 0], [0, 6, 3], 
                [0, 6, 0], [0, 4, 2], [0, 0, 6], [0, 0, 4], [0, 2, 6], [0, 2, 4], 
                [1, 12, 19], [1, 12, 18], [1, 12, 17], [1, 12, 16], [1, 12, 13], [1, 12, 12], 
                [1, 12, 15], [1, 12, 14], [0, 2, 2], [0, 2, 0], [0, 0, 2], [0, 0, 0]
            ], 
            [
                [0, 4, 6], [0, 6, 4], [0, 6, 6], [0, 4, 5], [0, 6, 2], [0, 4, 0], 
                [0, 4, 3], [0, 6, 0], [0, 0, 4], [0, 0, 6], [0, 2, 4], [0, 2, 6], 
                [1, 12, 18], [1, 12, 19], [1, 12, 16], [1, 12, 17], [1, 12, 12], [1, 12, 13], 
                [1, 12, 14], [1, 12, 15], [0, 2, 0], [0, 2, 2], [0, 0, 0], [0, 0, 2]
            ], 
            [
                [0, 4, 5], [0, 6, 6], [0, 6, 4], [0, 4, 6], [0, 6, 0], [0, 4, 3], 
                [0, 4, 0], [0, 6, 2], [0, 2, 6], [0, 2, 4], [0, 0, 6], [0, 0, 4], 
                [1, 12, 17], [1, 12, 16], [1, 12, 19], [1, 12, 18], [1, 12, 15], [1, 12, 14], 
                [1, 12, 13], [1, 12, 12], [0, 0, 2], [0, 0, 0], [0, 2, 2], [0, 2, 0]
            ], 
            [
                [1, 10, 5], [1, 8, 6], [1, 8, 5], [1, 10, 6], [1, 8, 0], [1, 10, 3], 
                [1, 10, 0], [1, 8, 3], [0, 4, 2], [0, 4, 0], [0, 6, 0], [0, 6, 2], 
                [0, 2, 4], [0, 0, 6], [0, 2, 6], [0, 0, 4], [0, 0, 0], [0, 2, 2], 
                [0, 0, 2], [0, 2, 0], [0, 6, 6], [0, 6, 4], [0, 4, 4], [0, 4, 6]
            ], 
            [
                [1, 10, 6], [1, 8, 5], [1, 8, 6], [1, 10, 5], [1, 8, 3], [1, 10, 0], 
                [1, 10, 3], [1, 8, 0], [0, 6, 2], [0, 6, 0], [0, 4, 0], [0, 4, 2], 
                [0, 0, 4], [0, 2, 6], [0, 0, 6], [0, 2, 4], [0, 2, 0], [0, 0, 2], 
                [0, 2, 2], [0, 0, 0], [0, 4, 6], [0, 4, 4], [0, 6, 4], [0, 6, 6]
            ], 
            [
                [1, 8, 5], [1, 8, 4], [1, 8, 7], [1, 8, 6], [1, 8, 2], [1, 8, 3], 
                [1, 8, 0], [1, 8, 1], [0, 6, 0], [0, 6, 2], [0, 4, 2], [0, 4, 0], 
                [0, 2, 6], [0, 0, 4], [0, 2, 4], [0, 0, 6], [0, 0, 2], [0, 2, 0], 
                [0, 0, 0], [0, 2, 2], [0, 4, 4], [0, 4, 6], [0, 6, 6], [0, 6, 4]
            ], 
            [
                [1, 8, 6], [1, 8, 7], [1, 8, 4], [1, 8, 5], [1, 8, 1], [1, 8, 0], 
                [1, 8, 3], [1, 8, 2], [0, 4, 0], [0, 4, 2], [0, 6, 2], [0, 6, 0], 
                [0, 0, 6], [0, 2, 4], [0, 0, 4], [0, 2, 6], [0, 2, 2], [0, 0, 0], 
                [0, 2, 0], [0, 0, 2], [0, 6, 4], [0, 6, 6], [0, 4, 6], [0, 4, 4]
            ]
        ]
    ], dtype=int)
    
    CONJUGATION_TABLE = np.array([0, 1, 2, 3, 4, 6, 5, 7, 8, 11, 10, 9, 12, 13, 15, 14, 20, 22, 23, 21, 16, 19, 17, 18], dtype=int)
    
    MEASURE_TABLE = np.array([
        [[0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1]], 
        [[1, 1], [1, 1], [1, -1], [1, -1], [2, -1], [2, -1], [2, 1], [2, 1], [3, -1], [3, -1], [3, 1], [3, 1], [1, -1], [1, -1], [1, 1], [1, 1], [2, 1], [2, 1], [2, -1], [2, -1], [3, 1], [3, 1], [3, -1], [3, -1]], 
        [[2, 1], [2, -1], [2, 1], [2, -1], [1, -1], [1, 1], [1, -1], [1, 1], [2, -1], [2, 1], [2, -1], [2, 1], [3, -1], [3, 1], [3, -1], [3, 1], [3, 1], [3, -1], [3, 1], [3, -1], [1, 1], [1, -1], [1, 1], [1, -1]], 
        [[3, 1], [3, -1], [3, -1], [3, 1], [3, -1], [3, 1], [3, 1], [3, -1], [1, -1], [1, 1], [1, 1], [1, -1], [2, -1], [2, 1], [2, 1], [2, -1], [1, 1], [1, -1], [1, -1], [1, 1], [2, 1], [2, -1], [2, -1], [2, 1]]
    ], dtype=int)


    def __init__(self, nqubits: int) -> None:
        super().__init__(nqubits)

        self.nqubits = nqubits
        self.vertices = list()
        for _ in range(nqubits):
            self.vertices.append(GraphStateSimulator.Vertex())
        self._gates = {
            # Pauli gates
            'i': self.I, 'x': self.X, 'y': self.Y, 'z': self.Z,
            # Clifford gates
            'h': self.H, 's': self.S, 'sdg': self.Sdg,
            # Multiqubit gates
            'cx': self.CX, 'cy': self.CY, 'cz': self.CZ, 'swap': self.Swap
        }
    
    @property
    def gates(self) -> Dict:
        return self._gates
    
    def apply_vop(self, qubit: int, vop: int) -> None:
        assert 0 <= qubit < self.nqubits, 'qubit out of range'
        assert 0 <= vop < 24, 'unknown VOP operation'
        self.vertices[qubit].apply_vop(vop)
    
    def I(self, qubit: int) -> None:
        self.apply_vop(qubit, 0)
    
    def X(self, qubit: int) -> None:
        self.apply_vop(qubit, 1)
    
    def Y(self, qubit: int) -> None:
        self.apply_vop(qubit, 2)
    
    def Z(self, qubit: int) -> None:
        self.apply_vop(qubit, 3)
    
    def H(self, qubit: int) -> None:
        self.apply_vop(qubit, 10)
    
    def S(self, qubit: int) -> None:
        self.apply_vop(qubit, 6)
    
    def Sdg(self, qubit: int) -> None:
        self.apply_vop(qubit, 5)
    
    def CX(self, control: int, target: int) -> None:
        self.H(target)
        self.CZ(control, target)
        self.H(target)
    
    def CY(self, control: int, target: int) -> None:
        self.S(target)
        self.CX(control, target)
        self.Sdg(target)

    def CZ(self, control: int, target: int) -> None:
        assert (0 <= control < self.nqubits) and (0 <= target < self.nqubits), 'qubits out of range'
        assert control != target, 'control qubit must be different from target qubit'

        if not self.vertices[control].is_unique_neighbor(target):
            self.remove_vop(control, target)
        if not self.vertices[target].is_unique_neighbor(control):
            self.remove_vop(target, control)
        if not self.vertices[control].is_unique_neighbor(target):
            self.remove_vop(control, target)
        
        edge = 1 if self.has_edge(control, target) else 0
        vop_a = self.vertices[control].vop
        vop_b = self.vertices[target].vop

        _edge, vop_a, vop_b = GraphStateSimulator.CZ_TABLE[edge, vop_a, vop_b]
        
        if edge != _edge:
            self.toggle_edge(control, target)
        self.vertices[control].vop = vop_a
        self.vertices[target].vop = vop_b
    
    def Swap(self, control: int, target: int) -> None:
        self.CX(control, target)
        self.CX(target, control)
        self.CX(control, target)
    
    def measure(self, target: int, basis: int = Simulator.Z_BASIS) -> int:
        assert 0 <= target < self.nqubits, 'qubit out of range'

        vop_conjugate = GraphStateSimulator.CONJUGATION_TABLE[self.vertices[target].vop]
        bare_basis, phase = GraphStateSimulator.MEASURE_TABLE[basis, vop_conjugate]

        eta = random.choice([0, 1])
        if bare_basis == Simulator.X_BASIS:
            eta = self.measure_x(target, eta)
        elif bare_basis == Simulator.Y_BASIS:
            eta = self.measure_y(target, eta)
        elif bare_basis == Simulator.Z_BASIS:
            eta = self.measure_z(target, eta)
        
        if phase == -1:
            eta = 1 if eta == 0 else 0
        
        return eta
    
    def remove_vop(self, qubit_a: int, qubit_b: int) -> None:
        if self.vertices[qubit_a].is_unique_neighbor(qubit_b):
            c = qubit_b
        else:
            c = self.vertices[qubit_a].diff({qubit_b}).pop()
        
        d = GraphStateSimulator.DECOMPOSITION_LOOKUP_TABLE[self.vertices[qubit_a].vop]
        for v in reversed(d):
            if v == 0:
                self.local_complementation(qubit_a)
            else:
                self.local_complementation(c)

    def local_complementation(self, qubit: int) -> None:
        ngbh = self.vertices[qubit].ngbh.copy()

        for i, j in combinations(ngbh, 2):
            self.toggle_edge(i, j)
        for i in self.vertices[qubit].ngbh:
            self.vertices[i].rapply_vop(6)
        self.vertices[qubit].rapply_vop(14)
    
    def add_edge(self, qubit_a: int, qubit_b: int) -> None:
        self.vertices[qubit_a].add_neighbor(qubit_b)
        self.vertices[qubit_b].add_neighbor(qubit_a)
    
    def remove_edge(self, qubit_a: int, qubit_b: int) -> None:
        self.vertices[qubit_a].remove_neighbor(qubit_b)
        self.vertices[qubit_b].remove_neighbor(qubit_a)
    
    def toggle_edge(self, qubit_a: int, qubit_b: int) -> None:
        if self.has_edge(qubit_a, qubit_b):
            self.remove_edge(qubit_a, qubit_b)
        else:
            self.add_edge(qubit_a, qubit_b)
    
    def has_edge(self, qubit_a: int, qubit_b: int) -> bool:
        return (qubit_a in self.vertices[qubit_b].ngbh) and (qubit_b in self.vertices[qubit_a].ngbh)
    
    def measure_z(self, target: int, eta: int) -> int:
        for n in self.vertices[target].ngbh.copy():
            self.remove_edge(target, n)
            if eta == 1:
                self.vertices[n].rapply_vop(3)
        if eta == 1:
            self.vertices[target].rapply_vop(1)
        self.vertices[target].rapply_vop(10)
        
        return eta
    
    def measure_y(self, target: int, eta: int) -> int:
        for n in self.vertices[target].ngbh | {target}:
            self.vertices[n].rapply_vop(5 if eta == 1 else 6)
        
        for i, j in combinations(self.vertices[target].ngbh | {target}, 2):
            self.toggle_edge(i, j)
    
    def measure_x(self, target: int, eta: int) -> int:
        if not self.vertices[target].has_neighbors():
            return 0
        b = self.vertices[target].ngbh.copy().pop()
        ngbh_a = self.vertices[target].ngbh.copy()
        ngbh_b = self.vertices[b].ngbh.copy()

        if eta == 1:
            self.vertices[target].rapply_vop(3)
            self.vertices[b].rapply_vop(9)

            for n in ngbh_b - ngbh_a - {target}:
                self.vertices[n].rapply_vop(3)
        else:
            self.vertices[b].rapply_vop(11)
            for n in ngbh_a - ngbh_b - {b}:
                self.vertices[n].rapply_vop(3)
        
        cartessian_prod = product(ngbh_a, ngbh_b)
        intersection = ngbh_a & ngbh_b
        difference = ngbh_a - {b}

        toggled = set()
        for i, j in cartessian_prod:
            if i == j or (i, j) in toggled:
                continue
            toggled.add((i, j))
            toggled.add((j, i))
            self.toggle_edge(i, j)
        
        for i, j in combinations(intersection, 2):
            self.toggle_edge(i, j)
        
        for d in difference:
            self.toggle_edge(b, d)
        
        return eta

    class Vertex:
        def __init__(self) -> None:
            self.vop = 10
            self.ngbh = set()
        
        def apply_vop(self, vop) -> None:
            self.vop = GraphStateSimulator.LOCAL_CLIFFORD_GROUP[vop, self.vop]
        
        def rapply_vop(self, vop) -> None:
            self.vop = GraphStateSimulator.LOCAL_CLIFFORD_GROUP[self.vop, vop]
        
        def add_neighbor(self, v: int) -> None:
            self.ngbh.add(v)
        
        def remove_neighbor(self, v: int) -> None:
            self.ngbh.remove(v)
        
        def diff(self, _set) -> Set:
            return self.ngbh - _set
        
        def has_neighbors(self) -> bool:
            return len(self.ngbh) != 0
        
        def is_unique_neighbor(self, b: int) -> bool:
            return len(self.ngbh - {b}) == 0
        
        def __str__(self) -> str:
            return f'{self.vop}: {self.ngbh}'
        
        def __repr__(self) -> str:
            return f'<Vertex object. VOP({self.vop}), Neighbors({self.ngbh})>'